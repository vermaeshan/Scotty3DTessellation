{
  "name": "Tessellation in the Scotty3D world.",
  "tagline": "Project Page for 15462 Final Project",
  "body": "                               everma@andrew.cmu.edu\r\n\r\n## Objective\r\nThough we implemented various sub-division schemes as part of the assignment, techniques like PN triangle method and Phong tessellation better approximate curves through bezier surfaces. By allowing the user to specify tessellation factor, the aim to implement hardware tessellation in software.\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/mesh_black.jpg)\r\n\r\n##Tessellation Theory\r\nThe tessellation is the process that divides a polygon into smaller ones. Another definition is: tessellation allows to increase polygons density. Today tessellation can be done on GPU and provides several key benefits:\r\n\r\n+**Compression**: using tessellation allows to reduce the memory footprint and bandwidth consumption by storing on disk only low resolution meshes.\r\n\r\n+**Bandwidth** is improved because, instead of transferring all of the vertex data for a high-polygon mesh over the PCI-E bus, only the coarse mesh is sent to the GPU.\r\n\r\n+**Scalability**: because of its recursive nature, subdivision naturally accommodates LOD rendering and adaptive approximation with a variety of metrics.\r\n\r\nWhile tessellation can be done on hardware, it will be useful to see how the final output will look.\r\n\r\n### PN Triangle Test\r\nFrom the input vertices and normals, Curved PN Triangles [[Vlachos et al. 2001]](https://www.cise.ufl.edu/research/SurfLab/papers/00ati.pdf) generates\r\ncontrol points to represent a smooth, cubic Bezier triangle that interpolates across the three\r\ninput vertices.\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/pn.png)\r\nThe cubic Bezier triangle can be evaluated given these control points with the following formula \r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/pn-eq.png)\r\nThe control points are generated by interpolating geometric vertex locations, and projecting\r\nthem along their nearest normal, and in the case of the center control point, the averaged\r\nnormal. The formulae for generating these control points are given in the appendix.\r\n\r\n###Phong Tessellation\r\nPhong Tessellation draws inspiration from Phong Shading, a method that shades boundary\r\nrepresentations smoothly by interpolating normals used for lighting calculations. Phong\r\nTessellation [[Boubekeur and Alexa 2008]](http://perso.telecom-paristech.fr/~boubek/papers/PhongTessellation/PhongTessellation.pdf) generates tangent planes for each input vertex,\r\naligned to each input normal, and performs barycentric interpolation within the three defining\r\ntangent planes of a triangle to find a newly generated point.\r\nThis process is illustrated in Figure. A newly generated vertex p is projected onto the three\r\ntangent planes, shown by the dotted green lines. The new vertex location p* is found by\r\nbarycentric interpolation of the tangent plane projections.\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/phong.png)\r\n\r\nWe can define the projection operation of a point q onto the tangent plane associated with\r\nvertex `vi` and normal `ni`\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/phong-eq.png)\r\n\r\nGiven this projection, we can find the new location `p*` of an input vertex `p` by a simple matrix\r\nmultiplication\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/phong-eq1.png)\r\n\r\n## Intended Outputs.\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/op.png)\r\n\r\n!(https://github.com/vermaeshan/Scotty3DTessellation/blob/master/images/triangle.png)\r\n\r\n## Steps\r\n1. Add an interface for Tessellation. Te process will be two step:\r\n    + To get in to Tessellation mode and define Tessellation Factor/Specify Method.\r\n    + Run Tessellation and Display Output\r\n2. Code Up PN Triangle and Phong Tessellation. \r\n    + This should be similar to Catmull-Clark implementation.\r\n\r\n## Authors and Contributors\r\nAll work will be done by Eshan. Alone. No partner. Solo.\r\n\r\n## References\r\n+[Smooth GPU Tessellation](https://people.eecs.berkeley.edu/~sequin/CS284/PROJ_12/Brandon/Smooth%20GPU%20Tessellation.pdf)\r\n\r\n+[Tessellation on GPU, Curved PN Triangle](http://onrendering.blogspot.com/2011/12/tessellation-on-gpu-curved-pn-triangles.html)\r\n\r\n+[10 Fun Things to do with Tessellation](http://www.ludicon.com/castano/blog/2009/01/10-fun-things-to-do-with-tessellation/)\r\n\r\n+[OpenGL Tutorial 30](http://ogldev.atspace.co.uk/www/tutorial30/tutorial30.html)\r\n\r\n+[OpenGL Tutorial 31](http://ogldev.atspace.co.uk/www/tutorial31/tutorial31.html)\r\n\r\n+[History of Hardware Tessellation](http://rastergrid.com/blog/2010/09/history-of-hardware-tessellation/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}